

#layout
from PyQt5.QtWidgets import QWidget
from PyQt5 import uic


from PyQt5.QtWidgets import QHeaderView, QTableWidget, QTableWidgetItem, QWidget, QHBoxLayout, QPushButton
from PyQt5.QtCore import Qt, QSize, QRect
from PyQt5.QtGui import QIcon
from PyQt5 import uic


from tables.table_clientes import TabelaClientes
from componentes.cliente import Cliente



class PerfilClientes(QWidget):
    def __init__(self):
        super(). __init__()
        uic.loadUi("ui/clientes.ui",self)

        self.configTable()
        self.table = TabelaClientes(self)

        # eventos dos botões
        self.setEventos()

        # mantém a referencia do contato selecionado atualmente para uma futura atualização ao salvar
        self.clienteAtual = None

    # define os eventos de todos os botões
    def setEventos(self):
        self.novo_btn.clicked.connect(self.salvarCliente)
        self.limpar_btn.clicked.connect(self.limpaCampos)
        self.excluir_btn.clicked.connect(self.excluirItem)



    def configTable(self):
        self.tableWidget.verticalHeader().setVisible(False)
        # ajusta a altura das linhas
        self.tableWidget.verticalHeader().setSectionResizeMode(
            QHeaderView.ResizeToContents)
        # ajusta as colunas ao tamanho da tela
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.tableWidget.horizontalHeader().setSectionResizeMode(
            QHeaderView.ResizeToContents)
        self.tableWidget.horizontalHeader().setSectionResizeMode(3,QHeaderView.Stretch)

        # desabilita a edição dos campos
        self.tableWidget.setEditTriggers(QTableWidget.NoEditTriggers)
        # seleciona toda a linha
        self.tableWidget.setSelectionBehavior(False)



    def salvarCliente(self):
        # adiciona os campos na tabela
        novoCliente = self.getCliente()
        # verifica os campos vazios
        if novoCliente != None:
            # é um novo contato
            if self.clienteAtual == None:
                # manda add no banco de dados
                self.table.addCliente(novoCliente)
            else:
                # manda editar no bando de dados
                novoCliente.id = self.clienteAtual.id
                self.table.editCliente(novoCliente)
            # limpa os campos
            self.limpaCampos()

    # pega as informações digitadas nos campos do Contato
    def getCliente(self):
        if((self.nome_line.text() != "") and (self.cpf_line.text() != "")) and (self.telefone_line.text() != ""):
            return Cliente(None, self.nome_line.text(), self.cpf_line.text(), self.telefone_line.text(), self.email_line.text())
        return None

    # limpa os campos e restaura os valores originais dos componentes
    def limpaCampos(self):
        self.clienteAtual = None
        self.nome_line.setText("")
        self.cpf_line.setText("")
        self.telefone_line.setText("")
        self.email_line.setText("")

        self.novo_btn.setText("Novo")
        self.excluir_btn.setEnabled(False)

    # utilizado para preencher os campos na janela principal
    def insereCliente(self, cliente):
        self.clienteAtual = cliente
        self.nome_line.setText(cliente.nome)
        self.cpf_line.setText(cliente.cpf)
        self.telefone_line.setText(cliente.telefone)
        self.email_line.setText(cliente.email)

        # muda o nome do botão para atualizar (já que existe o Contato)
        self.novo_btn.setText("Atualizar")
        self.excluir_btn.setEnabled(True)

    def excluirItem(self):
        self.table.delCliente(self.clienteAtual)
        # limpa os campos
        self.limpaCampos()



from PyQt5.QtWidgets import QHeaderView, QTableWidget, QTableWidgetItem, QWidget, QHBoxLayout, QPushButton
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QSize

import models.model_clientes as ClientesModel


class TabelaClientes:
    def __init__(self, tableWidget):

        self.tableWidget = tableWidget
        self.listaClientes= []
        self.cliente = None


        self.configTable()
        self.tableWidget.setRowCount(0)

        self.carregaDados()




    def configTable(self):
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setEditTriggers(QTableWidget.NoEditTriggers)
        self.tableWidget.setSelectionBehavior(QTableWidget.SelectRows)
        self.tableWidget.clicked.connect(self.on_click)



    def carregaDados(self):
        self.lista_clientes = ClientesModel.getClientes()
        self.tableWidget.setRowCount(0)
        for cliente in self.lista_clientes:
            self._addRow(cliente)



    def addCliente(self, cliente):
        ClientesModel.addCliente(cliente)
        self.carregaDados()

    def editCliente(self, cliente):
        ClientesModel.editCliente(cliente)
        self.carregaDados()

    def delCliente(self, cliente):
        ClientesModel.delCliente(cliente.id)

        self.carregaDados()

    def limparClientes(self):
        self.tableWidget.setRowCount(0)
        self.listaClientes = []
        self.parent.excluir_btn.setEnabled(False)
        self.parent.limpar_btn.setEnabled(False)

    def on_click(self):
        selected_row = self.tableWidget.currentRow() #linha selecionada
        id = self.tableWidget.item(selected_row, 0).text()
        cliente = ClientesModel.getCliente(id)
        self.parent.insereCliente(cliente)
        self.clienteAtual = self.listaClientes[selected_row]

    def _addRow(self, cliente):
        self.listaClientes.append(cliente)
        rowCount = self.tableWidget.rowCount()
        self.tableWidget.insertRow(rowCount)
        
        id = QTableWidgetItem(str(cliente.id))
        nome = QTableWidgetItem(cliente.nome)
        cpf = QTableWidgetItem(cliente.cpf)
        telefone = QTableWidgetItem(cliente.telefone)
        email = QTableWidgetItem(cliente.email)

        self.tableWidget.setItem(rowCount, 0, id)
        self.tableWidget.setItem(rowCount, 1, nome)
        self.tableWidget.setItem(rowCount, 2, cpf)
        self.tableWidget.setItem(rowCount, 3, telefone)
        self.tableWidget.setItem(rowCount, 4, email)
        self.tableWidget.setCellWidget(rowCount, 5, CustomQWidget(cliente,self))

    def limparSelecionado(self):
        self.listaClientes.remove(self.clienteAtual)
        novaLista = self.listaClientes

        self.limparClientes()
        self.parent.limpar_btn.setEnabled(True)

        for x in novaLista:
            self._addRow(x)

class CustomQWidget(QWidget):
    def __init__(self, cliente, parent):
        super(CustomQWidget, self).__init__()
        self.cliente = cliente
        self.parent = parent
        self.btn = QPushButton(self)
        self.btn.setText("")
        self.btn.setIcon(QIcon("icones/deletar.png"))
        self.btn.setShortcut('Ctrl+D')
        self.btn.clicked.connect(self.remover)
        self.btn.setToolTip("Remover "+ str(self.cliente.nome)+"?")
        self.btn.setStyleSheet('QPushButton {background-color: #00FFFFFF; border:  none}')
        self.btn.setIconSize(QSize(20,20))


        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 10)
        layout.addWidget(self.btn)
        self.setLayout(layout)


    def remover(self):
        self.parent.delCliente(self.cliente)
